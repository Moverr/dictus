{"version":3,"sources":["webpack:///./src/interfaces/checkboxes/display.vue?e59f","webpack:///src/interfaces/checkboxes/display.vue","webpack:///./src/interfaces/checkboxes/display.vue?93ee","webpack:///./src/interfaces/checkboxes/display.vue","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","_v","_s","displayValue","staticRenderFns","name","mixins","mixin","computed","selection","value","type","split","options","wrap","pop","shift","_this","display","formatting","map","val","choices","toString","component","module","exports","props","id","String","required","default","length","Number","readonly","Boolean","collection","primaryKey","Object","newItem","relation","fields","values","width","includes"],"mappings":"0HAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,YAAY,+BAA+B,CAACN,EAAIO,GAAGP,EAAIQ,GAAGR,EAAIS,kBACpKC,EAAkB,G,sDCMP,GACfC,KAAA,qBACAC,OAAA,CAAAC,KACAC,SAAA,CACAC,UAAA,WACA,cAAAC,MAAA,SAEA,IAAAD,EAAA,iBAAAE,KAAA,KAAAD,MAAAE,MAAA,UAAAF,MAKA,OAJA,KAAAG,QAAAC,OACAL,EAAAM,MACAN,EAAAO,SAEAP,GAEAN,aAAA,eAAAc,EAAA,KACAC,EAAA,KAAAT,UAAA,KAAAA,UAAA,GACA,YAAAI,QAAAM,YAAA,eAAAR,KACAO,EACAE,KAAA,SAAAC,GAAA,OAAAJ,EAAAJ,QAAAS,QAAAD,GAAAJ,EAAAJ,QAAAS,QAAAD,QACAE,WAEAL,EAAAK,cC5B+V,I,YCO3VC,EAAY,eACd,EACA/B,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAAoB,E,+BClBfC,EAAOC,QAAU,CACfC,MAAO,CAILC,GAAI,CACFjB,KAAMkB,OACNC,UAAU,GAGZzB,KAAM,CACJM,KAAMkB,OACNC,UAAU,GAIZpB,MAAO,CACLC,KAAM,KACNoB,QAAS,MAGXpB,KAAM,CACJA,KAAMkB,OACNC,UAAU,GAGZE,OAAQ,CACNrB,KAAM,CAACkB,OAAQI,QACfF,QAAS,MAGXG,SAAU,CACRvB,KAAMwB,QACNJ,SAAS,GAGXK,WAAY,CACVzB,KAAMkB,OACNE,QAAS,MAGXM,WAAY,CACV1B,KAAM,CAACsB,OAAQJ,QACfE,QAAS,MAGXD,SAAU,CACRnB,KAAMwB,QACNJ,SAAS,GAGXlB,QAAS,CACPF,KAAM2B,OACNP,QAAS,KAAM,KAGjBQ,QAAS,CACP5B,KAAMwB,QACNJ,SAAS,GAIXS,SAAU,CACR7B,KAAM2B,OACNP,QAAS,MAGXU,OAAQ,CACN9B,KAAM2B,OACNP,QAAS,MAIXW,OAAQ,CACN/B,KAAM2B,OACNP,QAAS,MAEXY,MAAO,CACLhC,KAAMkB,OACNE,QAAS,KACT,UAAUV,GACR,MAAO,CACL,OACA,YACA,aACA,OACA,QACAuB,SAASvB","file":"js/chunk-f15e1f44.5ca0f98a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"readonly-checkboxes no-wrap\"},[_vm._v(_vm._s(_vm.displayValue))])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<div class=\"readonly-checkboxes no-wrap\">{{ displayValue }}</div>\n</template>\n\n<script>\nimport mixin from '@directus/extension-toolkit/mixins/interface';\n\nexport default {\n\tname: 'ReadonlyCheckboxes',\n\tmixins: [mixin],\n\tcomputed: {\n\t\tselection() {\n\t\t\tif (this.value == null) return [];\n\n\t\t\tconst selection = this.type === 'VARCHAR' ? this.value.split(',') : this.value;\n\t\t\tif (this.options.wrap) {\n\t\t\t\tselection.pop();\n\t\t\t\tselection.shift();\n\t\t\t}\n\t\t\treturn selection;\n\t\t},\n\t\tdisplayValue() {\n\t\t\tlet display = this.selection ? this.selection : [];\n\t\t\tif (this.options.formatting && this.type === 'array') {\n\t\t\t\treturn display\n\t\t\t\t\t.map(val => (this.options.choices[val] ? this.options.choices[val] : val))\n\t\t\t\t\t.toString();\n\t\t\t}\n\t\t\treturn display.toString();\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./display.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./display.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./display.vue?vue&type=template&id=b99fd8b6\"\nimport script from \"./display.vue?vue&type=script&lang=js\"\nexport * from \"./display.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // Name of the collection\n    collection: {\n      type: String,\n      default: null\n    },\n    // Primary key of the item you're editing in this context\n    primaryKey: {\n      type: [Number, String],\n      default: null\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    },\n    width: {\n      type: String,\n      default: null,\n      validator(val) {\n        return [\n          'half',\n          'half-left',\n          'half-right',\n          'full',\n          'fill'\n        ].includes(val);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}