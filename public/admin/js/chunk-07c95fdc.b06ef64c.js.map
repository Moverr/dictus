{"version":3,"sources":["webpack:///./src/interfaces/repeater/display.vue?65ef","webpack:///src/interfaces/repeater/display.vue","webpack:///./src/interfaces/repeater/display.vue?a469","webpack:///./src/interfaces/repeater/display.vue","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","itemCount","menuOptions","staticRenderFns","name","mixins","mixin","computed","$tc","value","length","count","_this","options","forEach","push","text","$helpers","micromustache","template","component","module","exports","props","id","type","String","required","default","Number","readonly","Boolean","collection","primaryKey","Object","newItem","relation","fields","values","width","val","includes"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,oBAAoB,CAACE,MAAM,CAAC,QAAU,QAAQ,KAAON,EAAIO,UAAU,QAAUP,EAAIQ,YAAY,KAAO,KAAK,UAAY,gBACpNC,EAAkB,G,kCCaP,GACfC,KAAA,kBACAC,OAAA,CAAAC,KACAC,SAAA,CACAN,UAAA,WACA,YAAAO,IAAA,mBAAAC,OAAA,IAAAC,OAAA,CACAC,OAAA,KAAAF,OAAA,IAAAC,UAGAR,YAAA,eAAAU,EAAA,KACAC,EAAA,GAMA,OALAC,qBAAA,KAAAL,OAAA,SAAAA,GACAI,EAAAE,KAAA,CACAC,KAAAJ,EAAAK,SAAAC,cAAAzB,OAAAmB,EAAAC,QAAAM,SAAAV,QAGAI,EAAAH,OAAAG,EAAA,QC9B+V,I,YCO3VO,EAAY,eACd,EACA3B,EACAU,GACA,EACA,KACA,WACA,MAIa,aAAAiB,E,+BClBfC,EAAOC,QAAU,CACfC,MAAO,CAILC,GAAI,CACFC,KAAMC,OACNC,UAAU,GAGZvB,KAAM,CACJqB,KAAMC,OACNC,UAAU,GAIZlB,MAAO,CACLgB,KAAM,KACNG,QAAS,MAGXH,KAAM,CACJA,KAAMC,OACNC,UAAU,GAGZjB,OAAQ,CACNe,KAAM,CAACC,OAAQG,QACfD,QAAS,MAGXE,SAAU,CACRL,KAAMM,QACNH,SAAS,GAGXI,WAAY,CACVP,KAAMC,OACNE,QAAS,MAGXK,WAAY,CACVR,KAAM,CAACI,OAAQH,QACfE,QAAS,MAGXD,SAAU,CACRF,KAAMM,QACNH,SAAS,GAGXf,QAAS,CACPY,KAAMS,OACNN,QAAS,KAAM,KAGjBO,QAAS,CACPV,KAAMM,QACNH,SAAS,GAIXQ,SAAU,CACRX,KAAMS,OACNN,QAAS,MAGXS,OAAQ,CACNZ,KAAMS,OACNN,QAAS,MAIXU,OAAQ,CACNb,KAAMS,OACNN,QAAS,MAEXW,MAAO,CACLd,KAAMC,OACNE,QAAS,KACT,UAAUY,GACR,MAAO,CACL,OACA,YACA,aACA,OACA,QACAC,SAASD","file":"js/chunk-07c95fdc.b06ef64c.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-contextual-menu',{attrs:{\"trigger\":\"hover\",\"text\":_vm.itemCount,\"options\":_vm.menuOptions,\"icon\":null,\"placement\":\"right-end\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<v-contextual-menu\n\t\ttrigger=\"hover\"\n\t\t:text=\"itemCount\"\n\t\t:options=\"menuOptions\"\n\t\t:icon=\"null\"\n\t\tplacement=\"right-end\"\n\t/>\n</template>\n\n<script>\nimport mixin from '@directus/extension-toolkit/mixins/interface';\nimport { forEach } from 'lodash';\n\nexport default {\n\tname: 'DisplayRepeater',\n\tmixins: [mixin],\n\tcomputed: {\n\t\titemCount() {\n\t\t\treturn this.$tc('item_count', (this.value || []).length, {\n\t\t\t\tcount: (this.value || []).length\n\t\t\t});\n\t\t},\n\t\tmenuOptions() {\n\t\t\tconst options = [];\n\t\t\tforEach(this.value, value => {\n\t\t\t\toptions.push({\n\t\t\t\t\ttext: this.$helpers.micromustache.render(this.options.template, value)\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn options.length ? options : null;\n\t\t}\n\t}\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./display.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./display.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./display.vue?vue&type=template&id=aa99e6c8&scoped=true\"\nimport script from \"./display.vue?vue&type=script&lang=js\"\nexport * from \"./display.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"aa99e6c8\",\n  null\n  \n)\n\nexport default component.exports","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // Name of the collection\n    collection: {\n      type: String,\n      default: null\n    },\n    // Primary key of the item you're editing in this context\n    primaryKey: {\n      type: [Number, String],\n      default: null\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    },\n    width: {\n      type: String,\n      default: null,\n      validator(val) {\n        return [\n          'half',\n          'half-left',\n          'half-right',\n          'full',\n          'fill'\n        ].includes(val);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}