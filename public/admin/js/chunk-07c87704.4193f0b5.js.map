{"version":3,"sources":["webpack:///./src/interfaces/interface-types/input.vue?2d15","webpack:///src/interfaces/interface-types/input.vue","webpack:///./src/interfaces/interface-types/input.vue?9371","webpack:///./src/interfaces/interface-types/input.vue","webpack:///./node_modules/@directus/extension-toolkit/mixins/interface.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","value","on","$event","$emit","_l","type","key","domProps","_v","_s","$helpers","formatTitle","staticRenderFns","name","mixins","mixin","watch","interfaceName","selectFirst","computed","_objectSpread","mapState","interfaces","state","extensions","interfaceNameField","options","interfaceField","values","availableTypes","_this$interfaces$this","types","created","methods","undefined","length","component","module","exports","props","id","String","required","default","Number","readonly","Boolean","collection","primaryKey","Object","newItem","relation","fields","width","val","includes"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,kBAAkB,CAACE,MAAM,CAAC,MAAQN,EAAIO,OAAOC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOT,EAAIU,MAAM,QAASD,MAAWT,EAAIW,GAAIX,EAAkB,gBAAE,SAASY,GAAM,OAAOR,EAAG,SAAS,CAACS,IAAID,EAAKE,SAAS,CAAC,MAAQF,IAAO,CAACZ,EAAIe,GAAG,IAAIf,EAAIgB,GAAGhB,EAAIiB,SAASC,YAAYN,IAAO,UAAS,IAC3WO,EAAkB,G,oECWP,GACfC,KAAA,iBACAC,OAAA,CAAAC,KACAC,MAAA,CACAC,cAAA,WACA,KAAAC,gBAGAC,SAAAC,8BAAA,GACAC,eAAA,CACAC,WAAA,SAAAC,GAAA,OAAAA,EAAAC,WAAAF,eACA,IACAL,cAAA,WACA,IAAAQ,EAAA,KAAAC,QAAAC,eACA,GAAAF,EACA,YAAAG,OAAAH,IAEAI,eAAA,eAAAC,EACA,eAAAA,EAAA,KAAAR,WAAA,KAAAL,sBAAA,IAAAa,OAAA,EAAAA,EAAAC,SAGAC,QAAA,WACA,KAAAd,eAEAe,QAAA,CACAf,YAAA,gBACAgB,IAAA,KAAAL,gBAAA,SAAAA,eAAAM,QAEA,KAAAhC,MAAA,aAAA0B,eAAA,OCxC6V,I,YCOzVO,EAAY,eACd,EACA5C,EACAoB,GACA,EACA,KACA,KACA,MAIa,aAAAwB,E,+BClBfC,EAAOC,QAAU,CACfC,MAAO,CAILC,GAAI,CACFnC,KAAMoC,OACNC,UAAU,GAGZ7B,KAAM,CACJR,KAAMoC,OACNC,UAAU,GAIZ1C,MAAO,CACLK,KAAM,KACNsC,QAAS,MAGXtC,KAAM,CACJA,KAAMoC,OACNC,UAAU,GAGZP,OAAQ,CACN9B,KAAM,CAACoC,OAAQG,QACfD,QAAS,MAGXE,SAAU,CACRxC,KAAMyC,QACNH,SAAS,GAGXI,WAAY,CACV1C,KAAMoC,OACNE,QAAS,MAGXK,WAAY,CACV3C,KAAM,CAACuC,OAAQH,QACfE,QAAS,MAGXD,SAAU,CACRrC,KAAMyC,QACNH,SAAS,GAGXjB,QAAS,CACPrB,KAAM4C,OACNN,QAAS,KAAM,KAGjBO,QAAS,CACP7C,KAAMyC,QACNH,SAAS,GAIXQ,SAAU,CACR9C,KAAM4C,OACNN,QAAS,MAGXS,OAAQ,CACN/C,KAAM4C,OACNN,QAAS,MAIXf,OAAQ,CACNvB,KAAM4C,OACNN,QAAS,MAEXU,MAAO,CACLhD,KAAMoC,OACNE,QAAS,KACT,UAAUW,GACR,MAAO,CACL,OACA,YACA,aACA,OACA,QACAC,SAASD","file":"js/chunk-07c87704.4193f0b5.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-simple-select',{attrs:{\"value\":_vm.value},on:{\"input\":function($event){return _vm.$emit('input', $event)}}},_vm._l((_vm.availableTypes),function(type){return _c('option',{key:type,domProps:{\"value\":type}},[_vm._v(\" \"+_vm._s(_vm.$helpers.formatTitle(type))+\" \")])}),0)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<v-simple-select :value=\"value\" @input=\"$emit('input', $event)\">\n\t\t<option v-for=\"type in availableTypes\" :key=\"type\" :value=\"type\">\n\t\t\t{{ $helpers.formatTitle(type) }}\n\t\t</option>\n\t</v-simple-select>\n</template>\n\n<script>\nimport mixin from '@directus/extension-toolkit/mixins/interface';\nimport { mapState } from 'vuex';\n\nexport default {\n\tname: 'InterfaceTypes',\n\tmixins: [mixin],\n\twatch: {\n\t\tinterfaceName() {\n\t\t\tthis.selectFirst();\n\t\t}\n\t},\n\tcomputed: {\n\t\t...mapState({\n\t\t\tinterfaces: state => state.extensions.interfaces\n\t\t}),\n\t\tinterfaceName() {\n\t\t\tconst interfaceNameField = this.options.interfaceField;\n\t\t\tif (!interfaceNameField) return;\n\t\t\treturn this.values[interfaceNameField];\n\t\t},\n\t\tavailableTypes() {\n\t\t\treturn this.interfaces[this.interfaceName]?.types;\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.selectFirst();\n\t},\n\tmethods: {\n\t\tselectFirst() {\n\t\t\tif (this.availableTypes === undefined || this.availableTypes.length === 0) return;\n\n\t\t\tthis.$emit('input', this.availableTypes[0]);\n\t\t}\n\t}\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./input.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./input.vue?vue&type=template&id=3c69117d\"\nimport script from \"./input.vue?vue&type=script&lang=js\"\nexport * from \"./input.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // Name of the collection\n    collection: {\n      type: String,\n      default: null\n    },\n    // Primary key of the item you're editing in this context\n    primaryKey: {\n      type: [Number, String],\n      default: null\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    },\n    width: {\n      type: String,\n      default: null,\n      validator(val) {\n        return [\n          'half',\n          'half-left',\n          'half-right',\n          'full',\n          'fill'\n        ].includes(val);\n      }\n    }\n  }\n};\n"],"sourceRoot":""}